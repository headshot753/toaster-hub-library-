-- Toaster Hub UI Library 

-- ThemeManager
local ThemeManager = {}

ThemeManager.Themes = {
    Dark = {
        PrimaryColor = Color3.fromRGB(30, 30, 30),
        SecondaryColor = Color3.fromRGB(50, 50, 50),
        BorderColor = Color3.fromRGB(0, 255, 0),
        TabColor = Color3.fromRGB(40, 40, 40),
        TextColor = Color3.fromRGB(255, 255, 255),
        ButtonColor = Color3.fromRGB(255, 0, 0),
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        BoldFont = Enum.Font.SourceSansBold,
        BoldTextSize = 18,
    },
    Light = {
        PrimaryColor = Color3.fromRGB(240, 240, 240),
        SecondaryColor = Color3.fromRGB(200, 200, 200),
        BorderColor = Color3.fromRGB(0, 0, 0),
        TabColor = Color3.fromRGB(220, 220, 220),
        TextColor = Color3.fromRGB(10, 10, 10),
        ButtonColor = Color3.fromRGB(255, 100, 100),
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        BoldFont = Enum.Font.SourceSansBold,
        BoldTextSize = 18,
    }
}

ThemeManager.Current = ThemeManager.Themes.Dark

function ThemeManager:SetTheme(name)
    if ThemeManager.Themes[name] then
        ThemeManager.Current = ThemeManager.Themes[name]
    end
end

function ThemeManager:Toggle()
    if ThemeManager.Current == ThemeManager.Themes.Dark then
        ThemeManager.Current = ThemeManager.Themes.Light
    else
        ThemeManager.Current = ThemeManager.Themes.Dark
    end
end

function ThemeManager:Get()
    return ThemeManager.Current
end

-- LibraryCore
local LibraryCore = {}
LibraryCore.Theme = ThemeManager:Get()
LibraryCore.Version = "3.1"
LibraryCore.ThemedObjects = {}

function LibraryCore.UpdateTheme()
    local success, err = pcall(function()
        LibraryCore.Theme = ThemeManager:Get()
    end)
    if not success then warn("Failed to update theme: " .. err) end
end

function LibraryCore.RegisterThemeTarget(instance, props)
    table.insert(LibraryCore.ThemedObjects, {Instance = instance, Properties = props})
end

function LibraryCore.RefreshTheme()
    local success, err = pcall(function()
        LibraryCore.Theme = ThemeManager:Get()
        for _, obj in ipairs(LibraryCore.ThemedObjects) do
            for prop, key in pairs(obj.Properties) do
                obj.Instance[prop] = LibraryCore.Theme[key]
            end
        end
    end)
    if not success then warn("Failed to refresh theme: " .. err) end
end

LibraryCore.ThemeManager = ThemeManager

-- StateManager
local DataStoreService = game:GetService("DataStoreService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local StateManager = {}
local Store = DataStoreService:GetDataStore("ToasterHubUI")
local cache = {}
local FILE_PATH = "wave/workspace/ToasterHubUI_" .. Players.LocalPlayer.UserId .. ".json"

function StateManager:GetKey()
    return Players.LocalPlayer.UserId .. "_UIState"
end

function StateManager:Load()
    local success, data = pcall(function()
        return Store:GetAsync(self:GetKey())
    end)
    if success and type(data) == "table" then
        cache = data
        return cache
    end
    local fileSuccess, fileData = pcall(function()
        if isfile(FILE_PATH) then
            return HttpService:JSONDecode(readfile(FILE_PATH))
        end
    end)
    if fileSuccess and type(fileData) == "table" then
        cache = fileData
    end
    return cache
end

function StateManager:Save()
    pcall(function()
        Store:SetAsync(self:GetKey(), cache)
    end)
    pcall(function()
        writefile(FILE_PATH, HttpService:JSONEncode(cache))
    end)
end

function StateManager:Get(id, default)
    return cache[id] ~= nil and cache[id] or default
end

function StateManager:Set(id, value)
    cache[id] = value
    self:Save()
end

-- UIComponents
local Components = {}
local Theme = LibraryCore.Theme

function Components.Label(parent, text)
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -20, 0, 30)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Theme.TextColor
    Label.Font = Theme.Font
    Label.TextSize = Theme.TextSize
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = parent.Frame
    LibraryCore.RegisterThemeTarget(Label, {
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })
    return Label
end

function Components.Button(parent, text, callback)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, -20, 0, 35)
    Button.BackgroundColor3 = Theme.SecondaryColor
    Button.Text = text
    Button.TextColor3 = Theme.TextColor
    Button.Font = Theme.Font
    Button.TextSize = Theme.TextSize
    Button.Parent = parent.Frame
    Button.MouseButton1Click:Connect(callback)
    LibraryCore.RegisterThemeTarget(Button, {
        BackgroundColor3 = "SecondaryColor",
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })
    return Button
end

function Components.Toggle(parent, text, default, callback)
    local Toggle = {}
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -20, 0, 35)
    frame.BackgroundTransparency = 1
    frame.Parent = parent.Frame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.8, 0, 1, 0)
    label.Text = text
    label.TextColor3 = Theme.TextColor
    label.Font = Theme.Font
    label.TextSize = Theme.TextSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame
    LibraryCore.RegisterThemeTarget(label, {
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 50, 0, 25)
    button.Position = UDim2.new(1, -50, 0, 5)
    button.BackgroundColor3 = StateManager:Get(text, default) and Theme.ButtonColor or Theme.SecondaryColor
    button.Text = StateManager:Get(text, default) and "On" or "Off"
    button.TextColor3 = Theme.TextColor
    button.Font = Theme.Font
    button.TextSize = Theme.TextSize
    button.Parent = frame
    LibraryCore.RegisterThemeTarget(button, {
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    button.MouseButton1Click:Connect(function()
        local newValue = not StateManager:Get(text, default)
        StateManager:Set(text, newValue)
        button.Text = newValue and "On" or "Off"
        button.BackgroundColor3 = newValue and Theme.ButtonColor or Theme.SecondaryColor
        callback(newValue)
    end)

    function Toggle:Set(value)
        StateManager:Set(text, value)
        button.Text = value and "On" or "Off"
        button.BackgroundColor3 = value and Theme.ButtonColor or Theme.SecondaryColor
        callback(value)
    end

    return Toggle
end

function Components.Textbox(parent, text, default, callback)
    local Textbox = {}
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -20, 0, 35)
    frame.BackgroundTransparency = 1
    frame.Parent = parent.Frame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.5, 0, 1, 0)
    label.Text = text
    label.TextColor3 = Theme.TextColor
    label.Font = Theme.Font
    label.TextSize = Theme.TextSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame
    LibraryCore.RegisterThemeTarget(label, {
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    local input = Instance.new("TextBox")
    input.Size = UDim2.new(0.5, -10, 0, 25)
    input.Position = UDim2.new(0.5, 5, 0, 5)
    input.BackgroundColor3 = Theme.SecondaryColor
    input.Text = StateManager:Get(text, default)
    input.TextColor3 = Theme.TextColor
    input.Font = Theme.Font
    input.TextSize = Theme.TextSize
    input.Parent = frame
    LibraryCore.RegisterThemeTarget(input, {
        BackgroundColor3 = "SecondaryColor",
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    input.FocusLost:Connect(function()
        StateManager:Set(text, input.Text)
        callback(input.Text)
    end)

    function Textbox:Set(value)
        input.Text = value
        StateManager:Set(text, value)
        callback(value)
    end

    return Textbox
end

function Components.Dropdown(parent, text, options, callback)
    local Dropdown = {}
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -20, 0, 60)
    frame.BackgroundTransparency = 1
    frame.Parent = parent.Frame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 30)
    label.Text = text
    label.TextColor3 = Theme.TextColor
    label.Font = Theme.Font
    label.TextSize = Theme.TextSize
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame
    LibraryCore.RegisterThemeTarget(label, {
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 25)
    button.Position = UDim2.new(0, 5, 0, 30)
    button.BackgroundColor3 = Theme.SecondaryColor
    button.Text = StateManager:Get(text, options[1])
    button.TextColor3 = Theme.TextColor
    button.Font = Theme.Font
    button.TextSize = Theme.TextSize
    button.Parent = frame
    LibraryCore.RegisterThemeTarget(button, {
        BackgroundColor3 = "SecondaryColor",
        TextColor3 = "TextColor",
        Font = "Font",
        TextSize = "TextSize"
    })

    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = UDim2.new(1, -10, 0, 0)
    dropdownFrame.Position = UDim2.new(0, 5, 0, 55)
    dropdownFrame.BackgroundColor3 = Theme.SecondaryColor
    dropdownFrame.Visible = false
    dropdownFrame.Parent = frame
    LibraryCore.RegisterThemeTarget(dropdownFrame, { BackgroundColor3 = "SecondaryColor" })

    local layout = Instance.new("UIListLayout")
    layout.Parent = dropdownFrame

    local optionButtons = {}
    for i, option in ipairs(options) do
        local optButton = Instance.new("TextButton")
        optButton.Size = UDim2.new(1, 0, 0, 25)
        optButton.BackgroundColor3 = Theme.SecondaryColor
        optButton.Text = option
        optButton.TextColor3 = Theme.TextColor
        optButton.Font = Theme.Font
        optButton.TextSize = Theme.TextSize
        optButton.Parent = dropdownFrame
        LibraryCore.RegisterThemeTarget(optButton, {
            BackgroundColor3 = "SecondaryColor",
            TextColor3 = "TextColor",
            Font = "Font",
            TextSize = "TextSize"
        })

        optButton.MouseButton1Click:Connect(function()
            button.Text = option
            StateManager:Set(text, option)
            dropdownFrame.Visible = false
            dropdownFrame.Size = UDim2.new(1, -10, 0, 0)
            callback(option)
        end)
        optionButtons[i] = optButton
    end

    button.MouseButton1Click:Connect(function()
        dropdownFrame.Visible = not dropdownFrame.Visible
        dropdownFrame.Size = dropdownFrame.Visible and UDim2.new(1, -10, 0, #options * 25) or UDim2.new(1, -10, 0, 0)
    end)

    function Dropdown:Set(value)
        if table.find(options, value) then
            button.Text = value
            StateManager:Set(text, value)
            callback(value)
        end
    end

    return Dropdown
end

-- TabManager
local TabManager = {}

function TabManager.CreateWindow(name)
    local Window = {}
    Window.Tabs = {}
    Window.IsVisible = true

    local screenSize = workspace.CurrentCamera.ViewportSize
    local width = math.clamp(screenSize.X * 0.8, 320, 700)
    local height = math.clamp(screenSize.Y * 0.75, 360, 600)

    local gui = Instance.new("ScreenGui")
    gui.Name = name .. "Gui"
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, width, 0, height)
    frame.Position = UDim2.new(0.5, -width / 2, 0.5, -height / 2)
    frame.BackgroundColor3 = LibraryCore.Theme.PrimaryColor
    frame.BorderColor3 = LibraryCore.Theme.BorderColor
    frame.Parent = gui
    LibraryCore.RegisterThemeTarget(frame, {
        BackgroundColor3 = "PrimaryColor",
        BorderColor3 = "BorderColor"
    })

    local title = Instance.new("Frame")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = LibraryCore.Theme.SecondaryColor
    title.Parent = frame
    LibraryCore.RegisterThemeTarget(title, { BackgroundColor3 = "SecondaryColor" })

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Text = name
    label.TextColor3 = LibraryCore.Theme.TextColor
    label.Font = LibraryCore.Theme.BoldFont
    label.TextSize = LibraryCore.Theme.BoldTextSize
    label.BackgroundTransparency = 1
    label.Parent = title
    LibraryCore.RegisterThemeTarget(label, {
        那TextColor3 = "TextColor",
        Font = "BoldFont",
        TextSize = "BoldTextSize"
    })

    local minimize = Instance.new("TextButton")
    minimize.Size = UDim2.new(0, 30, 0, 30)
    minimize.Position = UDim2.new(1, -60, 0, 0)
    minimize.Text = "🗕"
    minimize.BackgroundColor3 = LibraryCore.Theme.ButtonColor
    minimize.TextColor3 = LibraryCore.Theme.TextColor
    minimize.Parent = title
    LibraryCore.RegisterThemeTarget(minimize, {
        BackgroundColor3 = "ButtonColor",
        TextColor3 = "TextColor"
    })

    local close = Instance.new("TextButton")
    close.Size = UDim2.new(0, 30, 0, 30)
    close.Position = UDim2.new(1, -30, 0, 0)
    close.Text = "🗙"
    close.BackgroundColor3 = LibraryCore.Theme.ButtonColor
    close.TextColor3 = LibraryCore.Theme.TextColor
    close.Parent = title
    LibraryCore.RegisterThemeTarget(close, {
        BackgroundColor3 = "ButtonColor",
        TextColor3 = "TextColor"
    })

    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(1, 0, 0, 30)
    tabContainer.Position = UDim2.new(0, 0, 0, 30)
    tabContainer.BackgroundColor3 = LibraryCore.Theme.SecondaryColor
    tabContainer.Parent = frame
    LibraryCore.RegisterThemeTarget(tabContainer, { BackgroundColor3 = "SecondaryColor" })

    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Parent = tabContainer

    local UserInputService = game:GetService("UserInputService")
    local dragging, dragStart, startPos
    title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    function Window:Hide()
        gui.Enabled = false
        Window.IsVisible = false
    end

    function Window:Show()
        gui.Enabled = true
        Window.IsVisible = true
    end

    function Window:Toggle()
        if Window.IsVisible then
            Window:Hide()
        else
            Window:Show()
        end
    end

    minimize.MouseButton1Click:Connect(function()
        Window:Toggle()
    end)

    close.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)

    function Window:CreateTab(tabName)
        local Tab = {}
        Tab.Sectors = {}
        Tab.Frame = Instance.new("ScrollingFrame")
        Tab.Frame.Size = UDim2.new(1, 0, 1, -60)
        Tab.Frame.Position = UDim2.new(0, 0, 0, 60)
        Tab.Frame.BackgroundTransparency = 1
        Tab.Frame.CanvasSize = UDim2.new(0, 0, 2, 0)
        Tab.Frame.ScrollBarThickness = 8
        Tab.Frame.Visible = (#Window.Tabs == 0)
        Tab.Frame.Parent = frame

        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.Text = tabName
        tabButton.BackgroundColor3 = LibraryCore.Theme.TabColor
        tabButton.TextColor3 = LibraryCore.Theme.TextColor
        tabButton.Font = LibraryCore.Theme.Font
        tabButton.TextSize = LibraryCore.Theme.TextSize
        tabButton.Parent = tabContainer
        LibraryCore.RegisterThemeTarget(tabButton, {
            BackgroundColor3 = "TabColor",
            TextColor3 = "TextColor",
            Font = "Font",
            TextSize = "TextSize"
        })

        tabButton.MouseButton1Click:Connect(function()
            for _, t in ipairs(Window.Tabs) do
                t.Frame.Visible = false
            end
            Tab.Frame.Visible = true
        end)

        for k, func in pairs(Components) do
            Tab["Add" .. k:gsub("^%l", string.upper)] = function(_, ...)
                return func(Tab, ...)
            end
        end

        function Tab:CreateSector(name, side)
            local Sector = {}
            local sectorFrame = Instance.new("Frame")
            sectorFrame.Size = UDim2.new(0.5, -10, 0, 0)
            sectorFrame.Position = UDim2.new(side == "left" and 0 or 0.5, 5, 0, 0)
            sectorFrame.BackgroundColor3 = LibraryCore.Theme.SecondaryColor
            sectorFrame.SizeConstraint = Enum.SizeConstraint.RelativeXX
            sectorFrame.AutomaticSize = Enum.AutomaticSize.Y
            sectorFrame.Parent = Tab.Frame
            LibraryCore.RegisterThemeTarget(sectorFrame, { BackgroundColor3 = "SecondaryColor" })

            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 30)
            titleLabel.Text = name
            titleLabel.TextColor3 = LibraryCore.Theme.TextColor
            titleLabel.Font = LibraryCore.Theme.BoldFont
            titleLabel.TextSize = LibraryCore.Theme.BoldTextSize
            titleLabel.BackgroundTransparency = 1
            titleLabel.Parent = sectorFrame
            LibraryCore.RegisterThemeTarget(titleLabel, {
                TextColor3 = "TextColor",
                Font = "BoldFont",
                TextSize = "BoldTextSize"
            })

            local layout = Instance.new("UIListLayout")
            layout.SortOrder = Enum.SortOrder.LayoutOrder
            layout.Padding = UDim.new(0, 5)
            layout.Parent = sectorFrame

            for k, func in pairs(Components) do
                Sector["Add" .. k:gsub("^%l", string.upper)] = function(_, ...)
                    return func(sectorFrame, ...)
                end
            end

            table.insert(Tab.Sectors, Sector)
            return Sector
        end

        table.insert(Window.Tabs, Tab)
        return Tab
    end

    return Window
end

-- init
print("Toaster Hub Library v" .. LibraryCore.Version .. " loaded")
return TabManager
